(defwidget bar []
    (centerbox :orientation "h"
      (workspaces)
      (music)
      (sidestuff)))
  
  (defwidget sidestuff []
    (box :class "sidestuff" :orientation "h" :space-evenly false :halign "end"
      (metric :label "vol:"
              :value volume
              :onchange "wpctl set-volume @DEFAULT_SINK@ {}%")
      (metric :label "mem:"
              :value {EWW_RAM.used_mem_perc}
              :onchange "")
      (metric :label "fs /"
              :value {round((1 - (EWW_DISK["/"].free / EWW_DISK["/"].total)) * 100, 0)}
              :onchange "")
      time))
  
  (defwidget workspaces []
    (box :class "workspaces"
         :orientation "h"
         :space-evenly true
         :halign "start"
         :spacing 10
      (button :onclick "hyprctl dispatch workspace 1 && dunstify -h string:x-canonical-private-synchronous:ws 'Workspace 1'" 1)
      (button :onclick "hyprctl dispatch workspace 2 && dunstify -h string:x-canonical-private-synchronous:ws 'Workspace 2'" 2)
      (button :onclick "hyprctl dispatch workspace 3 && dunstify -h string:x-canonical-private-synchronous:ws 'Workspace 3'" 3)
      (button :onclick "hyprctl dispatch workspace 4 && dunstify -h string:x-canonical-private-synchronous:ws 'Workspace 4'" 4)
      (button :onclick "hyprctl dispatch workspace 5 && dunstify -h string:x-canonical-private-synchronous:ws 'Workspace 5'" 5)
      (button :onclick "hyprctl dispatch workspace 6 && dunstify -h string:x-canonical-private-synchronous:ws 'Workspace 6'" 6)
      (button :onclick "hyprctl dispatch workspace 7 && dunstify -h string:x-canonical-private-synchronous:ws 'Workspace 7'" 7)
      (button :onclick "hyprctl dispatch workspace 8 && dunstify -h string:x-canonical-private-synchronous:ws 'Workspace 8'" 8)
      (button :onclick "hyprctl dispatch workspace 9 && dunstify -h string:x-canonical-private-synchronous:ws 'Workspace 9'" 9)
      (button :onclick "hyprctl dispatch workspace 10 && dunstify -h string:x-canonical-private-synchronous:ws 'Workspace 10'" 10)))
  
  (defwidget music []
    (box :class "music"
      :orientation "h"
      :space-evenly false
      :halign "center"
      {music != "" ? "ï¿½${music}" : ""}))
  
  
  (defwidget metric [label value onchange]
    (box :orientation "h"
      :class "metric"
      :space-evenly false
      (box :class "label" label)
      (scale :min 0
        :max 101
        :active {onchange != ""}
        :value value
        :onchange onchange))) 
  
  (deflisten music :initial ""
    "playerctl --follow metadata --format '{{ artist }} - {{ title }}' || true")
  
  (defpoll volume :interval "10s"
    "scripts/getvol")
  
  (defpoll time :interval "10s"
    "date '+%b %d, %Y %H:%M'")
    ; "date '+%H:%M %b %d, %Y'")
  
  (defwindow bar
    :monitor 0
    :exclusive true
    :windowtype "dock"
    :geometry (geometry :x "0%"
                        :y "0%"
                        :width "100%"
                        :height "8px"
                        :anchor "top center")
    :reserve (struts :side "top" :distance "4%")
    (bar))
