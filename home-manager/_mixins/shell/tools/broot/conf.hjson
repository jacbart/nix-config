default_flags: gswpI

terminal_title: "-= {file-name} =-"

date_time_format: %Y/%m/%d %R

# You may start either in 'command' mode, or in 'input' mode
modal: true
initial_mode: command

show_selection_mark: true

###############################################################
# Column order
# cols_order, if specified, must be a permutation of the following
# array. You should keep the name column at the end as it has a
# variable length.
#
# cols_order: [
#     mark
#     git
#     size
#     permission
#     date
#     count
#     branch
#     name
# ]

true_colors: true

icon_theme: nerdfont

special_paths: {
    "~/.config": { "show": "always" }
}

quit_on_last_cancel: true

###############################################################
# Search modes
#
# broot allows many search modes.
# A search mode is defined by
# - the way to search: 'fuzzy', 'exact', 'regex', or 'tokens'.
# - where to search: file 'name', 'path', or file 'content'
# A search pattern may for example be "fuzzy path" (default),
# "regex content" or "exact path".
#
# The search mode is selected from its prefix. For example, if
# you type "abc", the default mode is "fuzzy path". If you type
# "/abc", the mode is "regex path". If you type "rn/abc", the mode
# is "regex name".
#
# This mapping may be modified. You may want to dedicate the
# empty prefix (the one which doesn't need a '/') to the
# search mode you use most often. The example below makes it
# easy to search on name rather than on the subpath.
#
# More information on
#  https://dystroy.org/broot/input/#the-filtering-pattern
#
# search_modes: {
#     <empty>: fuzzy name
#     /: regex name
# }

ext_colors: {
    # orange
    png: rgb(224, 129, 29)
    jpg: rgb(224, 129, 29)
    jpeg: rgb(224, 129, 29)
    # light blue
    md: rgb(86, 185, 245)
    # green
    rs: rgb(86, 245, 143)
    go: rgb(86, 245, 143)
    # yellow
    cls: rgb(242, 245, 86)
    js: rgb(242, 245, 86)
    jsx: rgb(242, 245, 86)
    html: rgb(86, 245, 143)
    # pink
    yml: rgb(255, 155, 251)
    yaml: rgb(255, 155, 251)
    json: rgb(255, 155, 251)
    hjson: rgb(255, 155, 251)
    nix: rgb(255, 155, 251)
    hcl: rgb(255, 155, 251)
    conf: rgb(255, 155, 251)
    toml: rgb(255, 155, 251)
    jaws: rgb(255, 155, 251)
    koi: rgb(255, 155, 251)
    # red
    env: rgb(245, 86, 86)
    secret: rgb(245, 86, 86)
    lock: rgb(245, 86, 86)
    # light green
    sh: rgb(29, 224, 163)
    zsh: rgb(29, 224, 163)
    fish: rgb(29, 224, 163)
    ps1: rgb(29, 224, 163)
}

content_search_max_file_size: 10MB

max_panels_count: 2

update_work_dir: false

###############################################################
# Kitty Keyboard extension
#
# If you want to use advanced keyboard shortcuts in Kitty
# compatible terminals (Kitty, Wezterm), set this to true.
# 
# This makes it possible to use shortcuts like 'space-n', 
# 'ctrl-alt-a-b', 'shift-space', etc.
#
enable_kitty_keyboard: true
kitty_graphics_transmission: chunks

###############################################################
# lines around matching line in filtered preview
#
# When searching the content of a file, you can have either
# only the matching lines displayed, or some of the surrounding
# ones too.
#
lines_before_match_in_preview: 1
lines_after_match_in_preview: 1

preview_transformers: [
    # Use mutool to render any PDF file as an image
    # In this example we use placeholders for the input and output files
    {
        input_extensions: [ "pdf" ]
        output_extension: png
        mode: image
        command: [ "mutool", "draw", "-w", "1000", "-o", "{output-path}", "{input-path}" ]
    }

    # Use LibreOffice to render Office files as images
    # In this example, {output-dir} is used to specify where LibreOffice must write the result
    {
        input_extensions: [ "xls", "xlsx", "doc", "docx", "ppt", "pptx", "ods", "odt", "odp" ]
        output_extension: png
        mode: image
        command: [
            "libreoffice", "--headless",
            "--convert-to", "png",
            "--outdir", "{output-dir}",
            "{input-path}"
        ]
    }

    # Use jq to beautify JSON
    # In this example, the command refers to neither the input nor the output,
    # so broot pipes them to the stdin and stdout of the jq process
    {
        input_extensions: [ "json" ] 
        output_extension: json
        mode: text
        command: [ "jq" ]
    }
]

imports: [

    # Verbs are better configured in verbs.hjson. But you
    # can also add another files for your personal verbs
    verbs.hjson

    # This file contains the skin to use when the terminal
    # is dark (or when this couldn't be determined)
    {
        luma: [
            dark
            unknown
        ]
        file: skins/dark-gruvbox.hjson
    }

    # This skin is imported when your terminal is light
    {
        luma: light
        file: skins/white.hjson
    }
]
